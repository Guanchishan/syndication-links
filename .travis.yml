# Ditch sudo and use containers.
# # @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# # @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false
dist: trusty

# Declare project language.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

cache:
  directories:
    - vendor
    - $HOME/.composer/cache

# Receive notifications for build results.
# @link https://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email:
    on_success: never
    on_failure: change

env:
  matrix:
    - WP_VERSION=latest WP_MULTISITE=0
      global:
     - WP_TRAVISCI=travis:phpunit
php:
  - 5.6
  - 7.0
  - 7.2
  - 7.3
  - 7.4

jobs:
  include:
  - stage: lint
    php: 7.4
    script:
      - composer install
      - composer lint
  - stage: previousversion
    php: 7.4
    env: WP_VERSION=5.3 WP_MULTISITE=0
  - stage: oldestsupport
    php: 5.6
    env: WP_VERSION=4.9.9 WP_MULTISITE=0
    # WordPress 5.2 removes support for WordPress 5.4. Testing for 4.9.9 as many people did not move to 5.0 due Gutenberg concerns
  - stage: multisite
    php: 7.4
    env: WP_VERSION=latest WP_MULTISITE=1

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
- export PATH="$HOME/.composer/vendor/bin:$PATH"
- |
    if [[ ! -z "$WP_VERSION" ]] ; then
      set -e
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      set +e
    fi

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
- |
  # Speed up build time by disabling Xdebug.
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
- |
  # Export Composer's global bin dir to PATH:
  composer config --list --global
  export PATH=`composer config --list --global | grep '\[home\]' | { read a; echo "${a#* }/vendor/bin:$PATH"; }`
- |
  # Install the specified version of PHPUnit depending on the PHP version:
  if [[ "$WP_TRAVISCI" == "travis:phpunit" ]]; then
    case "$TRAVIS_PHP_VERSION" in
      7.4|7.3|7.2|7.1|nightly)
        echo "Using PHPUnit 7.x"
        composer global require "phpunit/phpunit:^7"
        ;;
      7.0)
        echo "Using PHPUnit 6.x"
        composer global require "phpunit/phpunit:^6"
        ;;
      5.6|5.5|5.4|5.3)
        echo "Using PHPUnit 4.x"
        composer global require "phpunit/phpunit:^4"
        ;;
      5.2)
        # Do nothing, use default PHPUnit 3.6.x
        echo "Using default PHPUnit, hopefully 3.6"
        ;;
      *)
        echo "No PHPUnit version handling for PHP version $TRAVIS_PHP_VERSION"
        exit 1
        ;;
    esac
  fi

- mysql --version
- phpenv versions
- php --version
- php -m
- which phpunit
- phpunit --version
- curl --version
- grunt --version
- git --version
- svn --version
- locale -a

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      # Run the build because otherwise there will be a bunch of warnings about
      # failed `stat` calls from `filemtime()`.
      echo Running with the following versions:
      php -v
      phpunit --version
      # Search for PHP syntax errors.
      - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
      # Run PHPUnit tests
      ./bin/test.sh
    fi
  - |
